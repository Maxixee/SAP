/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.agendamento.view;

import br.com.ifba.agendamento.model.Agendamento;
import br.com.ifba.agendamento.model.EnumAgendamentoStatus;
import br.com.ifba.infrastructure.service.IFacade;
import java.util.Calendar;
import java.util.Date;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.logging.Logger;
import java.util.logging.Level;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalTime;
import com.github.lgooddatepicker.components.TimePicker;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.swing.JOptionPane;
import lombok.Getter;
import lombok.Setter;
import org.springframework.context.annotation.Lazy;


/**
 *
 * @author davia
 */

@Component
public class TelaDisponibilidadePsicologo extends javax.swing.JFrame {
    @Autowired
    private IFacade facade;
    
    
    @PostConstruct
    public void init() {
        preencherTable();
    }
    
    /**
     * Creates new form TelaAgendamento
     */
    public TelaDisponibilidadePsicologo() {
        initComponents();    
        // Fecha a tela sem encerrar todo o sistema
        this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }
    
    private Calendar verificaDataAtual(){
        
        Date dataHoje = new Date();
        dataHoje.getTime();
        
        Calendar dataAtual = Calendar.getInstance();
        dataAtual.setTime(dataHoje);
        
        return dataAtual;
        
    }
    
    private void preencherTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear the existing rows

        List<Agendamento> agendamentoList = facade.getAllAgendamento();

        for(Agendamento agendamento : agendamentoList) {
            if(agendamento.getDataAgendamento() != null) {
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                String theDate = dateFormat.format(agendamento.getDataAgendamento().getTime());
                String theTime = agendamento.getHoraAgendamento().toString();

                model.addRow(new Object[]{theDate, theTime});
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnSalvar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtData = new com.toedter.calendar.JDateChooser();
        btnEditar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        timePicker1 = new com.github.lgooddatepicker.components.TimePicker();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnSalvar.setText("Salvar");
        btnSalvar.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        jLabel2.setText("Data do atendimento : ");

        txtData.setDateFormatString("dd/MM/yyyy");
        txtData.setMaxSelectableDate(new java.util.Date(253370779269000L));
        txtData.setMinSelectableDate(new java.util.Date(-62135755131000L));

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Horario"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setText("Horario do atendimento : ");

        btnCancel.setText("Cancelar");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtData, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(timePicker1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(63, 63, 63)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCancel))
                            .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 769, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(timePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
    
        Date dataSelecionada = txtData.getDate();

        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
        String timePickerValue = timePicker1.getText();
        Date horaSelecionada;

        try {
            horaSelecionada = timeFormat.parse(timePickerValue);
        } catch (ParseException ex) {
            Logger.getLogger(TelaDisponibilidadePsicologo.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        Calendar dataCalendar = Calendar.getInstance();
        dataCalendar.setTime(dataSelecionada);

        Calendar horaCalendar = Calendar.getInstance();
        horaCalendar.setTime(horaSelecionada);
        
        // cria um novo objeto Agendamento usando o método estático 
        // criarAgendamento da classe Agendamento
        // configurado com o status AGENDAMENTO_DISPONIVEL
        Agendamento ag = Agendamento.criarAgendamento(EnumAgendamentoStatus.AGENDAMENTO_DISPONIVEL);

        ag.setDataAgendamento(dataCalendar);

        // Obtenha a hora em formato LocalTime
        int hora = horaCalendar.get(Calendar.HOUR_OF_DAY);
        int minuto = horaCalendar.get(Calendar.MINUTE);
        LocalTime horaAgendamento = LocalTime.of(hora, minuto);

        ag.setHoraAgendamento(horaAgendamento);
        
        // Comparar os calendários usando o método compareTo()
        int resultadoComparacao = ag.getDataAgendamento().compareTo(this.verificaDataAtual());

        // Informa que a data é invalida pois ja se passou
        if (resultadoComparacao < 0) {
            
            JOptionPane.showMessageDialog(null, "Selecione uma nova data", "DATA INVALIDA", JOptionPane.INFORMATION_MESSAGE);
        }
        // Salva a nova data e horario
        else if(resultadoComparacao > 0){  
            if(facade.saveDataAgendamento(ag) == null){
                JOptionPane.showMessageDialog(null, "Esta data e horario ja existe no banco de dados", "DATA INVALIDA", JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Salvo com sucesso", "CONFIRMADO", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        preencherTable();
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

    int selectedRow = jTable1.getSelectedRow();

    // Verifica se alguma linha está selecionada
    if (selectedRow != -1) {
        // Obtém o Agendamento correspondente à linha selecionada
        Agendamento agendamento = facade.getAllAgendamento().get(selectedRow);

        // Atualiza o Agendamento com os novos valores
        Date newDate = txtData.getDate();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(newDate);
        agendamento.setDataAgendamento(calendar);

        LocalTime newTime = LocalTime.parse(timePicker1.getTime().toString());
        agendamento.setHoraAgendamento(newTime);

         // Salva o Agendamento atualizado no banco de dados
        facade.updateAgendamento(agendamento);
        
        
        preencherTable();
        /*SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        String formattedDate = dateFormat.format(newDate);
        jTable1.setValueAt(formattedDate, selectedRow, 0);
        jTable1.setValueAt(timePicker1.getTime().toString(), selectedRow, 1);*/
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        
        try {
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
            int seectedRow = jTable1.getSelectedRow();   
            Date date = new SimpleDateFormat("dd-MM-yyyy").parse((String)model.getValueAt(seectedRow, 0).toString());  
            txtData.setDate(date);
        } catch (ParseException ex) {
            Logger.getLogger(TelaDisponibilidadePsicologo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();

    // Verifica se alguma linha está selecionada
    if (selectedRow != -1) {
        // Obtém o Agendamento correspondente à linha selecionada
        Agendamento agendamento = facade.getAllAgendamento().get(selectedRow);
        
        facade.deleteAgendamento(agendamento);
        
        preencherTable();
    }
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaDisponibilidadePsicologo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaDisponibilidadePsicologo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaDisponibilidadePsicologo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaDisponibilidadePsicologo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaDisponibilidadePsicologo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private com.github.lgooddatepicker.components.TimePicker timePicker1;
    private com.toedter.calendar.JDateChooser txtData;
    // End of variables declaration//GEN-END:variables
}
