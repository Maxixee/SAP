/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.solicitacao.view;

import br.com.ifba.agendamento.model.Agendamento;
import br.com.ifba.agendamento.model.EnumAgendamentoStatus;
import br.com.ifba.email.model.EmailDto;
import br.com.ifba.infrastructure.service.IFacade;
import br.com.ifba.paciente.model.Paciente;
import static java.lang.constant.ConstantDescs.NULL;
import java.util.List;
import java.util.Random;
import javax.annotation.PostConstruct;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 *
 * @author andre
 */
@Component
public class TelaExibirSolicitacoes extends javax.swing.JFrame {
    @Autowired
    private IFacade facade;
    
    EmailDto email = new EmailDto();
    private List<Agendamento> agendamentos;
    
    Paciente p = new Paciente();

    /**
     * Creates new form TelaExibirSolicitacoes
     */
    public TelaExibirSolicitacoes() {
        initComponents();   
        // Fecha a tela sem encerrar todo o sistema
        this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }
    
// Método para atualizar a tabela na view
    @PostConstruct
    public void atualizarTabela() {
        // preenche a tabela apenas com os agendamentos solicitados
        try {
            this.agendamentos = this.facade.getAllAgendamentoSolicitado();
        } catch (Exception error) {
            JOptionPane.showMessageDialog(null, error,
                    "Erro ao buscar agendamentos!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel tabelaDados = (DefaultTableModel) tblSolicitacoes.getModel();
        tabelaDados.setNumRows(0);

        // Adiciona à tabela todos os agendamentos solicitados
        for (Agendamento a : agendamentos) {
            tabelaDados.addRow(new Object[]{
                a.getId(),
                a.getNomePaciente(),
                a.getMatriculaPaciente(),
            });
        }
    }
    
    /**
     * This method is called from within the constructor to initialize thed form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblSolicitacoes = new javax.swing.JTable();
        btnRecusar = new javax.swing.JButton();
        btnAceitar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblSolicitacoes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nome", "Matricula"
            }
        ));
        tblSolicitacoes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSolicitacoesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSolicitacoes);

        btnRecusar.setText("Recusar Solicitações");
        btnRecusar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecusarActionPerformed(evt);
            }
        });

        btnAceitar.setText("Aceitar Solicitações");
        btnAceitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceitarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("EXIBINDO SOLICITAÇÕES...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(btnAceitar, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRecusar, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(196, 196, 196))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRecusar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAceitar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceitarActionPerformed
        DefaultTableModel modeloTabela = (DefaultTableModel)tblSolicitacoes.getModel();
        int linhaSelecionada = tblSolicitacoes.getSelectedRow();

        // Verifica se alguma linha está selecionada
        if (linhaSelecionada != -1) {
            Agendamento agendamentoSelecionado;
            agendamentoSelecionado = facade.findAgendamentoById((Long) modeloTabela.getValueAt(linhaSelecionada, 0));
            // muda o status do agendamento para confirmado
            agendamentoSelecionado.setStatusAgendamento(EnumAgendamentoStatus.AGENDAMENTO_CONFIRMADOw);
            facade.updateAgendamento(agendamentoSelecionado);
            //verficar se o paciente já existe na base de dados
            List<Paciente> Paciente = facade.getAllPaciente();
            agendamentoSelecionado.setPaciente(p);
            for(Paciente paciente: Paciente){
                if(facade.getAllPaciente().equals(agendamentoSelecionado.getPaciente())){
               
               }//Verifica se o paciente ja tem uma chave de acesso 
                else if (agendamentoSelecionado.getPaciente().getChaveAcesso() == null ){
                   mandarEmail(agendamentoSelecionado); 
                 }
            }
           

            
        }
        atualizarTabela();        
    }//GEN-LAST:event_btnAceitarActionPerformed

    private void btnRecusarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecusarActionPerformed
        DefaultTableModel modeloTabela = (DefaultTableModel)tblSolicitacoes.getModel();
        int linhaSelecionada = tblSolicitacoes.getSelectedRow();

        // Verifica se alguma linha está selecionada
        if (linhaSelecionada != -1) {
            Agendamento agendamentoSelecionado;
            agendamentoSelecionado = facade.findAgendamentoById((Long) modeloTabela.getValueAt(linhaSelecionada, 0));
            facade.deleteAgendamento(agendamentoSelecionado);
        }
        atualizarTabela();        
    }//GEN-LAST:event_btnRecusarActionPerformed

    private void tblSolicitacoesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSolicitacoesMouseClicked
           DefaultTableModel model = (DefaultTableModel)tblSolicitacoes.getModel();
           int seectedRow = tblSolicitacoes.getSelectedRow();   
    }//GEN-LAST:event_tblSolicitacoesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaExibirSolicitacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaExibirSolicitacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaExibirSolicitacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaExibirSolicitacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaExibirSolicitacoes().setVisible(true);
            }
        });
    }

    public JTable getTblSolicitacoes() {
        return tblSolicitacoes;
    }

    public void setTblSolicitacoes(JTable tblSolicitacoes) {
        this.tblSolicitacoes = tblSolicitacoes;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceitar;
    private javax.swing.JButton btnRecusar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblSolicitacoes;
    // End of variables declaration//GEN-END:variables

public void mandarEmail(Agendamento ag){
    do{  
     //gera numero aleatorio para chave de acesso entre 0 e 99 
     Random random = new Random();
     int num = random.nextInt(100);
     //verifica se a chave de acesso já existe no banco de dados
     List<Paciente> Paciente = facade.getAllPaciente();
        
     for(Paciente paciente: Paciente){
         //if(facade.findByChaveAcesso(String.valueOf(num))== null)
         if(ag.getPaciente().getChaveAcesso()==null){
            System.out.println(""+facade.findByChaveAcesso(String.valueOf(num)));
            ag.getPaciente().setChaveAcesso(String.valueOf(num));
            facade.updatePaciente( ag.getPaciente());
            System.out.println(""+ag.getPaciente().getChaveAcesso());
         }
     }
    }while(ag.getPaciente().getChaveAcesso()==null);      
     //mandar email para usuario com a chave de acesso
     email.setTitle("Chave de acesso do sistema SAP");
     email.setText("Esse é numero da sua chave de acesso: "+ag.getPaciente().getChaveAcesso());
     email.setTo(ag.getPaciente().getEmail());
     email.setFrom("sapifba@gmail.com");
     facade.confirmmarEmail(email);            
}

public Paciente exportarDados(Paciente paciente){
       
       p =  paciente;
       return p;
       
   }

}
